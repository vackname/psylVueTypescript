let catchContainerNameStr=" image: ";var runSys=false;var dockerVersion="3.2.0.0";function sleep(ms){return new Promise(resolve=>{setTimeout(resolve,ms)})}var colors={empty:"[0m",bright:"[1m",grey:"[2m",italic:"[3m",underline:"[4m",reverse:"[7m",hidden:"[8m",black:"[30m",red:"[31m",green:"[32m",yellow:"[33m",blue:"[34m",magenta:"[35m",cyan:"[36m",white:"[37m",blackBG:"[40m",redBG:"[41m",greenBG:"[42m",yellowBG:"[43m",blueBG:"[44m",magentaBG:"[45m",cyanBG:"[46m",whiteBG:"[47m"};var dockerForYml={command:"",debug:"",socket:"",web:"",nginx:"",web_port:"",netWorkName:"",projectTagName:""};function catchYml(){if(dockerForYml.command==""||dockerForYml.command==null||dockerForYml.command==undefined){var fs=require("fs");var containerName="";var containerNameDebug="";var containerNameWebSocket="";var containerNameWeb="";var containerNameWebNginx="";var containerPort="";var containerNetWorkName="";var projectTagName="";try{let fileContents=fs.readFileSync("./docker-compose.yml","utf8");containerName=fileContents.split("container_name: ")[1].split("\n")[0].replace(/\r/g,"").replace(/ /g,"");containerNameDebug=fileContents.split(catchContainerNameStr)[2].split("container_name: ")[1].split("\n")[0].replace(/\r/g,"").replace(/ /g,"");containerNameWebSocket=fileContents.split(catchContainerNameStr)[3].split("container_name: ")[1].split("\n")[0].replace(/\r/g,"").replace(/ /g,"");containerNameWeb=fileContents.split(catchContainerNameStr)[4].split("container_name: ")[1].split("\n")[0].replace(/\r/g,"").replace(/ /g,"");containerNameWebNginx=fileContents.split("image: nginx")[1].split("container_name: ")[1].split("\n")[0].replace(/\r/g,"").replace(/ /g,"");containerPort=fileContents.split("image: nginx")[1].split("ports:")[1].split(":80")[0].split("- ")[1];containerNetWorkName=fileContents.split("external")[1].split("name:")[1].replace(/ /g,"");const pathRoot=require("path");var pjTagNameObj=pathRoot.dirname(require.main.filename).split("/");projectTagName=pjTagNameObj[pjTagNameObj.length-1]}catch(e){console.log(colors.empty+colors.red+e)}dockerForYml.command=containerName;dockerForYml.debug=containerNameDebug;dockerForYml.socket=containerNameWebSocket;dockerForYml.web=containerNameWeb;dockerForYml.nginx=containerNameWebNginx;dockerForYml.web_port=containerPort;dockerForYml.netWorkName=containerNetWorkName;dockerForYml.projectTagName=projectTagName}return dockerForYml}async function psylProjectListAsync(){var fsJsProject=require("fs");var addPJ=[];await new Promise((resolve,reject)=>{fsJsProject.readdir("./src/",(err,files)=>{files.forEach((file,nu)=>{if(fsJsProject.statSync("./src/"+file).isDirectory()){if(fsJsProject.existsSync("./src/"+file+"/package.json")){addPJ.push(file)}}});resolve()})});return addPJ}function psylProjectPackageTypeScriptPathStringList(pjName){var typeArray=[];var fsDotnetProjet=require("fs");if(fsDotnetProjet.existsSync("./src/"+pjName+"/tscpackage.json")){let psylPackage=JSON.parse(fsDotnetProjet.readFileSync("./src/"+pjName+"/tscpackage.json","utf8"));if(psylPackage!=null&&psylPackage!=undefined){psylPackage.forEach((val,nu)=>{var reJoin=val.src.split("/");var addPath=[];reJoin.forEach((val2,nu2)=>{if(val2!="tsconfig.json"){addPath.push(val2)}});typeArray.push(addPath.join("/"))})}}return typeArray}function psylProjectPackageViewTypeList(pjName){var typeArray=[];var fsDotnetProjet=require("fs");if(fsDotnetProjet.existsSync("./src/"+pjName+"/package.json")){let psylPackage=JSON.parse(fsDotnetProjet.readFileSync("./src/"+pjName+"/package.json","utf8"))[0].inputFiles;if(psylPackage!=null&&psylPackage!=undefined){psylPackage.forEach((val,nu)=>{if(val.indexOf("/"+pjName+"/controllers/")==0&&val.indexOf(".ts")>-1){psylPackage.forEach((val2,nu2)=>{if(val.replace("/controllers/","/view/")==val2&&val.indexOf(".ts")>-1){typeArray.push(val2.substring(pjName.length+7,val2.length-3))}})}})}}return typeArray}async function dotnetProjectExisTypeAsync(){var fsDotnetProject=require("fs");var addPJ=[];await new Promise((resolve,reject)=>{fsDotnetProject.readdir("./DotNetProject/",(err,files)=>{files.forEach((file,nu)=>{if(fsDotnetProject.statSync("./DotNetProject/"+file).isDirectory()){if(fsDotnetProject.existsSync("./DotNetProject/"+file+"/"+file+".csproj")){if(!fsDotnetProject.existsSync("./DotNetProject/"+file+"/Controllers")&&!fsDotnetProject.existsSync("./DotNetProject/"+file+"/Program.cs")){addPJ.push({type:"classlib",name:file})}else if(fsDotnetProject.existsSync("./DotNetProject/"+file+"/Controllers")){addPJ.push({type:"webapi",name:file})}else{addPJ.push({type:"console",name:file})}}}});resolve()})});return addPJ}function dotnetProjectList(){var projectArray=[];var fsDotnetProjet=require("fs");if(fsDotnetProjet.existsSync("./.vscode/launch.json")&&fsDotnetProjet.existsSync("./.vscode/tasks.json")){let dotnetDebugLaunch=JSON.parse(fsDotnetProjet.readFileSync("./.vscode/launch.json","utf8")).configurations;if(dotnetDebugLaunch!=null&&dotnetDebugLaunch!=undefined){dotnetDebugLaunch.forEach((val,nu)=>{if(val.type=="docker"){if(val.preLaunchTask.indexOf("docker-run: debug_for_")==0){projectArray.push(val.preLaunchTask.substring(22))}}})}}return projectArray}function dotnetInfo(searchPJName){var fs=require("fs");if(fs.existsSync("./.vscode/launch.json")&&fs.existsSync("./.vscode/tasks.json")){if(fs.existsSync("./DotNetProject/"+searchPJName)){let dotnetDebugLaunch=dotnetProjectList();var LaunchExist=false;dotnetDebugLaunch.forEach((Projectname,nu)=>{if(Projectname==searchPJName){LaunchExist=true}});if(LaunchExist){let dotnetDebugTasks=JSON.parse(fs.readFileSync("./.vscode/tasks.json","utf8")).tasks;if(dotnetDebugTasks!=null&&dotnetDebugTasks!=undefined){var toDotnetDebugInfo=[];dotnetDebugTasks.forEach((val,nu)=>{if(val.type=="docker-run"){if(val.label=="docker-run: debug_for_"+searchPJName){if(val.dockerRun.env!=null&&val.dockerRun.env!=undefined){if(val.dockerRun.env.hostname!=null&&val.dockerRun.env.hostname!=undefined){toDotnetDebugInfo.push(["env hostname         ",val.dockerRun.env.hostname])}toDotnetDebugInfo.push(["env network          ",val.dockerRun.env.network]);if(val.dockerRun.env.ASPNETCORE_URLS!=null&&val.dockerRun.env.ASPNETCORE_URLS!=undefined){toDotnetDebugInfo.push(["env ASPNETCORE_URLS  ",val.dockerRun.env.ASPNETCORE_URLS])}}if(val.dockerRun.ports!=null&&val.dockerRun.ports!=undefined){val.dockerRun.ports.forEach((val2,nu2)=>{toDotnetDebugInfo.push(["port["+(nu2+1)+"]              ",val2.hostPort+":"+val2.containerPort])})}}}});if(toDotnetDebugInfo.length!=0){console.log(colors.empty+colors.blueBG+colors.white+"Docker"+colors.empty+colors.yellow+" Debug setting for info->");toDotnetDebugInfo.forEach((val,nu)=>{console.log(colors.empty+colors.grey+val[0]+colors.empty+colors.green+val[1])})}else{console.log(colors.grey+colors.yellow+"not exist dotnet for project info....")}}}else{console.log(colors.grey+colors.red+"not exist dotnet for project["+searchPJName+"]....");console.log(colors.grey+colors.red+"./.vscode/launch.json type = 'docker',preLaunchTask = 'docker-run: debug_for_"+searchPJName+"'")}}else{console.log(colors.grey+colors.red+"not exist dotnet for project....")}}else{console.log(colors.grey+colors.red+"not exist dotnet for project....")}console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}let rlSyncOrderLineRun=null;let saveCmmand="";async function toCommand(arg){setTimeout(function(){saveCmmand=""},3e3);if(arg.length>2){var anws="";var toOder=[];if(arg[1]=="npm"||arg[1]=="npx"||arg[1]=="node"||arg[1]=="dotnet"){anws=arg[1];arg.forEach(function(an,nu){if(nu>0){toOder.push(an)}});switch(anws){case"dotnet":if(arg[2]=="reference"){anws="dotnetreference";if(arg.length==3){toOder=[];var projectArray=dotnetProjectList();if(projectArray.length>0){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;await new Promise((resolve,reject)=>{console.log(colors.empty+colors.cyan+"(0) remove");console.log(colors.empty+colors.cyan+"(1) add");let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search type?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectTypeNu=-1;try{toProjectTypeNu=Number(answer)}catch(e){}if([0,1].indexOf(toProjectTypeNu)>-1){toOder.push(["remove","add"][toProjectTypeNu]);resolve()}else{reject("error set type number")}})}).then(()=>{return new Promise((resolve,reject)=>{projectArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&projectArray.length>=toProjectNumber){var projectChoose=projectArray[toProjectNumber-1];resolve("./DotNetProject/"+projectChoose+"/"+projectChoose+".csproj")}else{reject("error set project number")}})})}).then(csprojpath=>{return new Promise(async(resolve,reject)=>{var dotnetProjectArray=await dotnetProjectExisTypeAsync();var classlibNu=0;var dotnetClassLibArray=[];dotnetProjectArray.forEach((val,nu)=>{if(val.type=="classlib"){console.log(colors.empty+colors.cyan+"("+(classlibNu+1)+") "+val.name);dotnetClassLibArray.push(val.name);classlibNu++}});let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search LibaryClass Project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&dotnetClassLibArray.length>=toProjectNumber){toOder.push(csprojpath);toOder.push("reference");toOder.push("./DotNetProject/"+dotnetClassLibArray[toProjectNumber-1]+"/"+dotnetClassLibArray[toProjectNumber-1]+".csproj");resolve()}else{reject("error set LibaryClass project number")}})})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}else{console.log(colors.empty+colors.red+"not exist project"+colors.empty)}}}else if(arg[2]=="debugs"){if(arg.length==3){var projectArray=dotnetProjectList();if(projectArray.length>0){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});await new Promise((resolve,reject)=>{rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"create launch name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: Docker All Debug"+colors.empty+"\n"+colors.empty+colors.grey+" name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){toOder.push("--name");toOder.push(answer.replace(/ /g,"&nbsp;"));resolve()}else{reject("fail empty value(launch name)")}})}).then(async function(){var addProjects=[];function addProject(addNewProjectNameVal){projectArray.forEach((val,nu)=>{if(addProjects.indexOf(val)==-1){console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)}});console.log(colors.empty+colors.cyan+"(yes) check settig for project");console.log(colors.empty+colors.cyan+"(cancel) leave");if(addNewProjectNameVal!="first"){if(addNewProjectNameVal=="[notExist]"){console.log(colors.empty+colors.red+"Not exist project")}else if(addNewProjectNameVal!=""){console.log(colors.empty+colors.green+"add "+addNewProjectNameVal)}else{console.log(colors.empty+colors.blue+"exist project")}console.log(colors.empty+colors.yellowBG+colors.green+"launch->"+colors.empty+colors.grey+"["+addProjects.join(",")+"]")}return new Promise((resolve,reject)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",async function(answer){rlSync.close();if(answer!="yes"&&answer!="cancel"){var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){console.log(e)}if(toProjectNumber>-1&&projectArray.length>=toProjectNumber){var addNewProjectName=toProjectNumber>0?projectArray[toProjectNumber-1]:"[notExist]";if(addNewProjectName==null||addNewProjectName==undefined){addNewProjectName="[notExist]"}else{if(addProjects.indexOf(addNewProjectName)==-1){addProjects.push(addNewProjectName)}else{addNewProjectName=""}}await addProject(addNewProjectName);resolve("")}else{console.log(colors.empty+colors.red+colors.yellowBG+"error set project number"+colors.empty);resolve("")}}resolve(answer)})}).then(function(answer){if(answer!=""){if(answer=="cancel"){addProjects=[]}else if(addProjects.length<=1){addProjects=[];console.log(colors.empty+colors.red+"not choose project"+colors.empty)}}}).catch(error=>{if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}await addProject("first");if(addProjects.length>1){toOder.push("--configs");toOder.push(addProjects.join(","))}}).catch(error=>{if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}else{console.log(colors.empty+colors.yellow+"not exist project fort dotnet"+colors.empty)}}}else if(arg[2]=="-info"){anws="dotnetInfo";if(arg.length==3){var projectArray=dotnetProjectList();if(projectArray.length>0){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;projectArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});await new Promise((resolve,reject)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&projectArray.length>=toProjectNumber){arg.push(projectArray[toProjectNumber-1]);resolve(toProjectNumber)}else{reject("error set project number")}})}).catch(error=>{if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}else{console.log(colors.empty+colors.yellow+"not exist project fort dotnet"+colors.empty)}}}else{const fs=require("fs");if(fs.existsSync("./"+catchYml().projectTagName+".sln")){const fs2=require("fs");fs2.unlink("./"+catchYml().projectTagName+".sln",err=>{})}if(!fs.existsSync("./.dockerignore")){const zlib=require("zlib");var dockerDockerignore="H4sIAAAAAAAAA02OTQ7CIBCF9z0KiXgGY7swURd6AENhSqnANAxt4u0tgyZdfe8nLzNCHKX2imhWeWzE5gzqNyRnIybgAOLKtC7/uWvnhBPo2hDk7KIlNhnRU1bJQi1X+kGj4amQoozlQpCqN30wvsppCEX0LhboUaXM+/rdQWOYkUBwudMt14Pz1cbt1CugWTzwOs7hYKBfrPRoS4D9VECgE2SSBlb5UYF/WJVfYBddL+fu/uyaR3dqb50M5gtMFTH6OwEAAA==";var buf=Buffer.from(dockerDockerignore,"base64");zlib.unzip(buf,function(err,buffer){if(err)throw err;dockerDockerignore=buffer.toString("utf8");fs.writeFile("./.dockerignore",dockerDockerignore,function(err2){if(err2)throw err2})})}if(arg[2]=="new"&&arg.length==3){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;await new Promise((resolve,reject)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});console.log(colors.empty+colors.cyan+"(1) webapi");console.log(colors.empty+colors.cyan+"(2) console");console.log(colors.empty+colors.cyan+"(3) classlib");rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"create project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&toProjectNumber<=3){toOder.push(["webapi","console","classlib"][toProjectNumber-1]);resolve(toProjectNumber)}else{reject("error set project number")}})}).then(function(toProjectNumber){return new Promise(function(resolve,reject){let rlSync2=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync2.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"create project name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: webAPI1"+colors.empty+"\n"+colors.empty+colors.grey+" name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer2){rlSync2.close();answer2=answer2.replace(/ /g,"_");if(answer2!=""){toOder.push("-o");toOder.push(answer2);if(toProjectNumber==1){let rlSync3=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync3.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"web for port(docker container for local)?"+colors.empty+"\n"+colors.empty+colors.grey+"(default:5000)"+colors.empty+"\n"+colors.empty+colors.grey+" Anwser "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer3){rlSync3.close();answer3=answer3.replace(/ /g,"_");var toContainerPort=5e3;try{toContainerPort=Number(answer3);if(answer3!=""?toContainerPort==0||answer3*0!=0:true){toContainerPort=5e3;console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);console.log(colors.empty+colors.yellow+"default port for 5000")}}catch(e){toContainerPort=5e3;console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);console.log(colors.empty+colors.red+"error set port for 5000"+colors.empty)}if(toContainerPort!=5e3&&toContainerPort>-1){toOder.push("-p");toOder.push(toContainerPort)}resolve(answer2)})}else{resolve(answer2)}}else{reject()}})})}).then(function(projectName){toOder.push("-network");toOder.push(catchYml().netWorkName);toOder.push("-dockerName");toOder.push(catchYml().projectTagName);setTimeout(function(){var fsDotnetProjet=require("fs");if(fsDotnetProjet.existsSync("./.vscode/launch.json")&&fsDotnetProjet.existsSync("./.vscode/tasks.json")){if(fsDotnetProjet.existsSync("./DotNetProject/"+projectName)){let dotnetDebugLaunch=JSON.parse(fsDotnetProjet.readFileSync("./.vscode/launch.json","utf8")).configurations;var LaunchExist=false;if(dotnetDebugLaunch!=null&&dotnetDebugLaunch!=undefined){dotnetDebugLaunch.forEach((val,nu)=>{if(val.type=="docker"){if(val.preLaunchTask=="docker-run: debug_for_"+projectName){LaunchExist=true}}})}if(LaunchExist){dotnetInfo(projectName)}}}},3e3)}).catch(error=>{if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}});setTimeout(function(){var cp=require("child_process");cp.exec(`dotnet new sln --name ${catchYml().projectTagName}`,function(error,stdout,stderr){cp.exec(`dotnet sln add ./DotNetProject/*/*.csproj`,function(error1,stdout1,stderr1){})})},3e3);fs.mkdir("./DotNetProject",err=>{try{if(err.code!="EEXIST"){return console.error(err)}}catch(e){return console.log(colors.empty+colors.green+"failed Directory created!")}console.log(colors.empty+colors.green+"Directory created successfully!")})}}break}}else{anws=arg[2];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}})}if(anws=="-h"){var helpMes=[" psyl ci-cd  :          auto run to git version for refresh(git pull & restart web)"," psyl docker :          install or reset runing for process"," psyl storage [bundle file Name]:","@                          bundle [net core project] location file folder name","@"," psyl node-ev       :   node npm install typescript bundle & scss/sass->css bundle"," psyl remove node-ev:   node npm unstall typescript bundle & scss/sass->css bundle"," psyl new           :   create for vue of dev","@                          (1)create project","@                          (2)create project for view","@                          (3)create project for document","@                          (4)create project for typeScript Model","@"," psyl -map:             set composer for path of map"," psyl tscdb [password]:","@                          Host DB to TB schema(/src/config/InterfaceJsonHost.json","@                          ex [{'host':'domain.com','port':'9888','Scheme':'https'}]","@                          cmd default for test-> psyl tscdb samplePassword","@"," psyl stop -d  :       stop debug model(close=[key.x + control])","psyl -d  :             debug model(close=[key.x + control])","psyl web :             stop run web serve","psyl stop web :        stop stop web serve","psyl -b run   :        composer build project (release)","psyl remove   :        for project","@                          (1)remove project","@                          (2)remove view","@                          (3)remove typescript model","@                          (4)remove normal document html/css/sacss/ts","@","psyl -s :              now set detail","psyl -a :              author detail","psyl -v :              version message","npm [option]:          support node/npm/npx","npx [option]:          support node/npm/npx","dotnet new             support dotnet create project","@                          (1))webapi","@                          (2)console","@                          (3)classlib","@","dotnet debugs          setting VSCode debug(launch) for muliteple","dotnet -info           dotnet of dockerfile run for info","dotnet reference       include/remove libary class .csproj"];var countRow=1;helpMes.forEach(function(val,nu){if(val.indexOf("@")==-1){console.log(colors.empty+colors.grey+countRow+"."+colors.empty+colors.blue+val);countRow++}else{console.log(colors.empty+colors.blue+val.substring(1))}});console.log("");console.log("");console.log(colors.empty+colors.yellow+"----- create Date: 2019.11.09 "+colors.empty+colors.cyan+`docker v${dockerVersion}`+colors.empty+colors.yellow+"-----");console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}else if(anws=="ci-cd"){var cp=require("child_process");cp.exec(`docker update --restart=always ${catchYml().web}`,function(error,stdout,stderr){console.log(colors.empty+colors.yellow+"reset web --restart=always"+colors.empty+colors.white);cp.exec(`docker restart ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker restart ${catchYml().nginx}`,function(error,stdout,stderr){console.log(colors.empty+colors.yellow+"start web"+colors.empty+colors.white);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})});async function runCI_CD(){var gitVersion=cp.spawn("git",["pull"]);var restartWebFlag=false;gitVersion.stdout.on("data",data=>{console.log(colors.empty+colors.yellow+"log->"+colors.empty+colors.grey+data);if(data.indexOf("lready up to date")==-1){restartWebFlag=true}});gitVersion.stderr.on("data",data=>{console.log(colors.empty+colors.cyan+"runing->"+colors.empty+colors.grey+data)});gitVersion.on("close",(code,signal)=>{if(restartWebFlag){console.log(colors.empty+colors.yellow+"listen restart web"+colors.empty+colors.white);cp.exec(`docker stop ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker restart ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker restart ${catchYml().nginx}`,function(error,stdout,stderr){console.log(colors.empty+colors.yellow+"start web"+colors.empty+colors.white);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})})}});gitVersion.on("error",err=>{console.log(colors.empty+colors.red+"error->"+colors.empty+colors.grey+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)});function formattedDateTime(date){const y=date.getFullYear();const m=("0"+(date.getMonth()+1)).slice(-2);const d=("0"+date.getDate()).slice(-2);const h=("0"+date.getHours()).slice(-2);const mi=("0"+date.getMinutes()).slice(-2);const s=("0"+date.getSeconds()).slice(-2);const ms=date.getMilliseconds();return y+"-"+m+"-"+d+" "+h+":"+mi+":"+s+"."+ms}const date=new Date;const currentTime=formattedDateTime(date);console.log(colors.empty+colors.grey+currentTime+"...");await sleep(3e3);runCI_CD()}runCI_CD()}else if(anws=="docker"){var cp=require("child_process");var dockerRunPsyl=cp.spawn("docker-compose",["stop"],{stdio:"inherit"});dockerRunPsyl.on("close",(code,signal)=>{console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);var dockerRunPsyl1=cp.spawn("docker-compose",["rm","-f"],{stdio:"inherit"});dockerRunPsyl1.on("close",(code,signal)=>{console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);var dockerRunPsyl2=cp.spawn("docker",["network","create",catchYml().netWorkName],{stdio:"inherit"});dockerRunPsyl2.on("close",(code,signal)=>{var dockerRunPsyl3=cp.spawn("docker-compose",["--compatibility","up","-d"],{stdio:"inherit"});dockerRunPsyl3.on("close",(code,signal)=>{var counTdown=0;async function runInit(){await sleep(300);process.stdout.clearLine();process.stdout.cursorTo(0);var toChar="";switch(counTdown){case 0:toChar="";break;case 1:toChar=".";break;case 2:toChar=".●";break;case 3:toChar=".◎●";break}process.stdout.write(colors.empty+colors.blue+" ⠿ Init      debug model        await"+colors.empty+colors.green+toChar);if(counTdown>=0){if(counTdown<3){counTdown++}else{counTdown=0}runInit()}else{process.stdout.clearLine();process.stdout.cursorTo(0)}}runInit();cp.exec(`docker stop ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().debug}`,async function(error,stdout,stderr){counTdown=-1;process.stdout.clearLine();process.stdout.cursorTo(0);console.log(colors.empty+colors.blue+" ⠿ Complete  for debug model    Stopped"+colors.empty+colors.white);await toCommand(["node","psyl","-map"]);cp.exec(`docker stop ${catchYml().socket}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().nginx}`,function(error,stdout,stderr){process.stdout.clearLine();process.stdout.cursorTo(0);console.log(colors.empty+colors.blue+" ⠿ Complete  for web            Stopped"+colors.empty+colors.white);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})})})});dockerRunPsyl3.on("error",err=>{var fs=require("fs");if(fs.existsSync("./docker-compose.yml")){fs.unlinkSync("./docker-compose.yml")}console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})});dockerRunPsyl2.on("error",err=>{var fs=require("fs");if(fs.existsSync("./docker-compose.yml")){fs.unlinkSync("./docker-compose.yml")}console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})});dockerRunPsyl1.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})});dockerRunPsyl.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})}else if(anws=="web"||anws=="stop"&&(toOder.length>=2?toOder[1]=="web":false)){var toOrder=anws=="stop"&&(toOder.length>=2?toOder[1]=="web":false)?"stop":"start";var cp=require("child_process");cp.exec(`docker ${toOrder} ${catchYml().socket}`,function(error,stdout,stderr){cp.exec(`docker ${toOrder} ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker ${toOrder=="start"?"restart":toOrder} ${catchYml().nginx}`,function(error,stdout,stderr){if(toOder[1]!="totscdb"){console.log(colors.grey+colors.yellow+toOrder+(stdout!=""?colors.empty+colors.green+" OK":colors.empty+colors.red+" Fail")+"->"+colors.empty+colors.grey+stdout);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}})})});if(toOrder=="stop"){console.log(colors.grey+colors.yellow+"close web....")}else{console.log(colors.grey+colors.yellow+`runing web (http://127.0.0.1:${catchYml().web_port})....`+colors.empty)}if(toOder[1]!="totscdb"){console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}}else if(anws=="-d"||anws=="stop"&&(toOder.length>=2?toOder[1]=="-d":false)){var cp=require("child_process");var toOrder=anws=="stop"&&(toOder.length>=2?toOder[1]=="-d":false)?"stop":"start";cp.exec(`docker ${toOrder} ${catchYml().socket}`,function(error,stdout,stderr){console.log(colors.grey+colors.yellow+toOrder+(stdout!=""?colors.empty+colors.green+" OK":colors.empty+colors.red+" Fail")+"->"+colors.empty+colors.grey+stdout);if(toOrder=="start"){console.log(colors.empty+colors.cyan+`runing web (http://127.0.0.1:${catchYml().web_port})....`);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);var counTdown=0;async function runInit(){process.stdout.clearLine();process.stdout.cursorTo(0);var toChar="";switch(counTdown){case 0:toChar="";break;case 1:toChar=".";break;case 2:toChar=".●";break;case 3:toChar=".◎●";break}process.stdout.write(colors.empty+colors.grey+"init debug model...."+colors.empty+colors.green+toChar);await sleep(300);if(counTdown>=0){if(counTdown<3){counTdown++}else{counTdown=0}runInit()}else{process.stdout.clearLine();process.stdout.cursorTo(0)}}runInit();cp.exec(`docker restart ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker restart ${catchYml().nginx}`,function(error,stdout,stderr){cp.exec(`docker restart ${catchYml().debug}`,function(error,stdout,stderr){counTdown=-1;process.stdout.clearLine();process.stdout.cursorTo(0);console.log("");var dockerRunPsyl=cp.spawn("docker",["exec","-it",catchYml().debug,"/bin/bash","arg.sh","LWQ="],{stdio:"inherit"});dockerRunPsyl.on("close",(code,signal)=>{console.log(colors.empty+colors.yellow+"stop debug...."+colors.empty+colors.green+"OK"+colors.empty+colors.white);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)});dockerRunPsyl.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})})})}else{var counTdown=0;async function runInit(){process.stdout.clearLine();process.stdout.cursorTo(0);var toChar="";switch(counTdown){case 0:toChar="";break;case 1:toChar=".";break;case 2:toChar=".●";break;case 3:toChar=".◎●";break}process.stdout.write(colors.empty+colors.grey+"stop debug ...."+colors.empty+colors.green+toChar);await sleep(300);if(counTdown>=0){if(counTdown<3){counTdown++}else{counTdown=0}runInit()}else{process.stdout.clearLine();process.stdout.cursorTo(0)}}runInit();cp.exec(`docker stop ${catchYml().web}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().debug}`,function(error,stdout,stderr){counTdown=-1;console.log("");cp.exec(`docker stop ${catchYml().nginx}`,function(error,stdout,stderr){});console.log(colors.empty+colors.yellow+"stop debug...."+colors.empty+colors.green+"OK"+colors.empty+colors.white);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})}});if(toOrder=="stop"){console.log(colors.grey+colors.yellow+"close debug model....")}else{console.log(colors.grey+colors.yellow+"runing debug model....")}}else if(anws=="dotnetreference"){if(toOder.length>0){var cp=require("child_process");var dockerRunPsyl=cp.spawn("dotnet",toOder,{stdio:"inherit"});dockerRunPsyl.on("close",(code,signal)=>{console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)});dockerRunPsyl.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})}}else if(anws=="dotnetInfo"){dotnetInfo(arg[3])}else if(runSys){var cp=require("child_process");if(anws=="-map"){console.log(colors.empty+colors.cyanBG+colors.green+" build "+colors.empty+colors.blueBG+colors.green+" Docker-Container "+colors.empty+colors.grey+"→"+colors.empty+colors.green+catchYml().web+colors.empty+colors.grey+`(http://127.0.0.1:${catchYml().web_port})`);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);toOder=["-p","9788"]}let base64data=Buffer.from(toOder.join(" ")).toString("base64");if(toOder.join(" ")=="-b run"){var counTdown=0;async function runInit(){process.stdout.clearLine();process.stdout.cursorTo(0);var toChar="";switch(counTdown){case 0:toChar="";break;case 1:toChar=".";break;case 2:toChar=".●";break;case 3:toChar=".◎●";break}process.stdout.write(colors.empty+colors.yellow+"listen debug model(stop)"+colors.empty+colors.green+toChar);await sleep(300);if(counTdown>=0){if(counTdown<3){counTdown++}else{counTdown=0}runInit()}else{process.stdout.clearLine();process.stdout.cursorTo(0)}}runInit();cp.exec(`docker stop ${catchYml().socket}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().debug}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().nginx}`,function(error,stdout,stderr){cp.exec(`docker stop ${catchYml().web}`,function(error,stdout,stderr){counTdown=-1;process.stdout.clearLine();process.stdout.cursorTo(0);var dockerRunPsyl=cp.spawn("docker",["exec","-it",catchYml().command,"/bin/bash","arg.sh",base64data],{stdio:"inherit"});dockerRunPsyl.on("close",(code,signal)=>{console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)});dockerRunPsyl.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})})})})})}else{if(anws=="tscdb"){var fs=require("fs");if(fs.existsSync("./src/config/InterfaceJsonHost.json")){try{let fileContents=fs.readFileSync("./src/config/InterfaceJsonHost.json","utf8");if(fileContents.indexOf("get.web.com")>-1){await toCommand(["node","psyl","web","totscdb"]);await sleep(1e3)}}catch(e){console.log(colors.empty+colors.red+e)}}}if(anws=="new"){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;await new Promise((resolve,reject)=>{console.log(colors.empty+colors.cyan+"(1)create project");console.log(colors.empty+colors.cyan+"(2)create project for view");console.log(colors.empty+colors.cyan+"(3)create project for document");console.log(colors.empty+colors.cyan+"(4)create project for typeScript Model");let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search type?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectTypeNu=-1;try{toProjectTypeNu=Number(answer)}catch(e){}if([1,2,3,4].indexOf(toProjectTypeNu)>-1){anws=["project","view","document","tsc"][toProjectTypeNu-1];resolve()}else{reject("error set type number")}})}).then(()=>{if(anws=="project"){return new Promise(async(resolve2,reject2)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"add project name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: projectA"+colors.empty+"\n"+colors.empty+colors.grey+" add name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){arg=["","psyl",anws,answer.replace(/ /g,"_")];toOder=[];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}});resolve2()}else{reject2("error set project name")}})})}else{return new Promise(async(resolve,reject)=>{var projectArray=await psylProjectListAsync();projectArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});if(projectArray.length>0){let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&projectArray.length>=toProjectNumber){var projectChoose=projectArray[toProjectNumber-1];resolve(projectChoose)}else{reject("error set project number")}})}else{arg=[];toOder=[];reject("not exist project list")}}).then(projectChoose=>{return new Promise(async(resolve2,reject2)=>{if(anws=="view"){let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"add project for view name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: viewPage1"+colors.empty+"\n"+colors.empty+colors.grey+" add name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){arg=["","psyl",anws,projectChoose+"<"+answer.replace(/ /g,"_")];toOder=[];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}});resolve2()}else{reject2("error set view name")}})}else if(anws=="tsc"){let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"add project for typescript model name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: model/runModel"+colors.empty+"\n"+colors.empty+colors.grey+" add name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){arg=["","psyl",anws,projectChoose+"<"+answer.replace(/ /g,"_")];toOder=[];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}});resolve2()}else{reject2("error set typescript model name")}})}else if(anws=="document"){let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"add project for document(html,scss,css) name?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: temp/runPage.html or temp2/page.scss ...."+colors.empty+"\n"+colors.empty+colors.grey+" add name "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){arg=["","psyl",anws,projectChoose+"<"+answer.replace(/ /g,"_")];toOder=[];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}});resolve2()}else{reject2("error set document name")}})}})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}});base64data=Buffer.from(toOder.join(" ")).toString("base64")}else if(anws=="remove"){rlSyncOrderLineRun.close();rlSyncOrderLineRun=null;await new Promise((resolve,reject)=>{console.log(colors.empty+colors.cyan+"(1)remove project");console.log(colors.empty+colors.cyan+"(2)remove view");console.log(colors.empty+colors.cyan+"(3)remove typescript model");console.log(colors.empty+colors.cyan+"(4)remove normal document html/css/sacss/ts");let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search type?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectTypeNu=-1;try{toProjectTypeNu=Number(answer)}catch(e){}if([1,2,3,4].indexOf(toProjectTypeNu)>-1){anws=["-rp","-rv","-rt","-r"][toProjectTypeNu-1];resolve()}else{reject("error set type number")}})}).then(()=>{return new Promise(async(resolve,reject)=>{var projectArray=await psylProjectListAsync();projectArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});if(projectArray.length>0){let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search project?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&projectArray.length>=toProjectNumber){var projectChoose=projectArray[toProjectNumber-1];resolve(projectChoose)}else{reject("error set project number")}})}else{arg=[];toOder=[];reject("not exist project list")}})}).then(ProjectChoose=>{return new Promise(async(resolve,reject)=>{if(anws=="-rv"){var ProjectViewArray=psylProjectPackageViewTypeList(ProjectChoose);ProjectViewArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});if(ProjectViewArray.length>0){await new Promise(async(resolve2,reject2)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search Project for view?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&ProjectViewArray.length>=toProjectNumber){ProjectChoose=ProjectChoose+"<"+ProjectViewArray[toProjectNumber-1];resolve2()}else{reject2("error set project for view number")}})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}else{arg=[];toOder=[];reject("not exist view list")}}else if(anws=="-rt"){var ppTscArray=psylProjectPackageTypeScriptPathStringList(ProjectChoose);ppTscArray.forEach((val,nu)=>{console.log(colors.empty+colors.cyan+"("+(nu+1)+") "+val)});if(ppTscArray.length>0){await new Promise(async(resolve2,reject2)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"search Project for typescript model?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: enter 1"+colors.empty+"\n"+colors.empty+colors.grey+" choose for number "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();var toProjectNumber=-1;try{toProjectNumber=Number(answer)}catch(e){}if(toProjectNumber>-1&&ppTscArray.length>=toProjectNumber){ProjectChoose=ProjectChoose+"<"+ppTscArray[toProjectNumber-1];resolve2()}else{reject2("error set project for typescript model number")}})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}else{arg=[];toOder=[];reject("not exist model list")}}else if(anws=="-r"){await new Promise(async(resolve2,reject2)=>{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"remove document path?"+colors.empty+"\n"+colors.empty+colors.grey+"ex: view/dd/aa.css"+colors.empty+"\n"+colors.empty+colors.grey+" add path "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){rlSync.close();if(answer!=""){ProjectChoose=ProjectChoose+"<"+answer;resolve2()}else{reject2("error set path")}})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}})}arg=["","psyl",anws,ProjectChoose];toOder=[];arg.forEach(function(an,nu){if(nu>1){toOder.push(an)}});resolve()})}).catch(error=>{toOder=[];if(error!=null&&error!=undefined&&error!=""){console.log(colors.empty+colors.red+colors.yellowBG+error+colors.empty)}});base64data=Buffer.from(toOder.join(" ")).toString("base64")}var dockerRunPsyl=cp.spawn("docker",["exec","-it",catchYml().command,"/bin/bash","arg.sh",base64data],{stdio:"inherit"});dockerRunPsyl.on("close",async(code,signal)=>{switch(anws){case"-rp":case"-rv":case"-r":case"project":case"view":case"tsc":case"-rt":await toCommand(["node","psyl","-map"]);break;case"document":var runFirst_map=true;arg.forEach(function(an,nu){if(an.toLowerCase().indexOf(".html")>-1&&runFirst_map){runFirst_map=false}});if(!runFirst_map){await toCommand(["node","psyl","-map"])}break;default:console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);break}});dockerRunPsyl.on("error",err=>{console.log(colors.empty+colors.red+error);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)})}}else{console.log(colors.empty+colors.yellow+"init for wait....");console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}}else if(arg.length!=0){console.log(colors.empty+colors.yellow+"input error....");console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}orderLineRun()}function orderLineRun(){if(rlSyncOrderLineRun==null){rlSyncOrderLineRun=require("readline").createInterface(process.stdin,process.stdout);rlSyncOrderLineRun.prompt();rlSyncOrderLineRun.on("line",async ans=>{if(saveCmmand!=ans){saveCmmand=ans;if(ans.indexOf("psyl ")==0||ans.indexOf("npm ")==0||ans.indexOf("npx ")==0||ans.indexOf("node ")==0||ans.indexOf("dotnet ")==0){await toCommand(`node ${ans}`.split(" "))}else{console.log(colors.empty+colors.yellow+"note:"+colors.empty+colors.red+"command-> 'psyl' [...]"+colors.empty);console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white)}}});rlSyncOrderLineRun.on("resume",()=>{console.log("Resume Event is invoked.")});rlSyncOrderLineRun.on("SIGINT",()=>{});rlSyncOrderLineRun.on("SIGTSTP",async()=>{await toCommand("node psyl stop -d".split(" "));rlSyncOrderLineRun.close()})}}async function runPsylProcess(){console.log("");console.log(colors.grey+"                 ◤◢◤◢");console.log(colors.grey+"             ◤◢◤◢◤◢◤◢◤◢◤");console.log(colors.grey+"            ◤◢◤◢◤ "+colors.empty+colors.red+"◢◢"+colors.empty+colors.green+" ◢◤◢◤"+colors.empty);console.log(colors.grey+"            ◤◢◤◢◤ "+colors.empty+colors.yellow+"◤◢"+colors.empty+colors.cyan+" ◢◤◢"+colors.empty);console.log(colors.grey+"             ◤◢◤◢ ◢ ◢◤◢◢");console.log(colors.grey+"                ◤◢◢◢◤"+colors.empty);console.log(colors.blue+"Copyright © psyltw/gitime And "+colors.empty+colors.greenBG+colors.green+" Author "+colors.empty+colors.whiteBG+colors.green+" CHUNG,CHI-WEN "+colors.empty);console.log("");console.log(colors.empty+colors.grey+"◢◤◢◤"+colors.empty+colors.black+colors.reverse+"◢◤◢◤"+colors.empty+colors.grey+"◢◤◢◤"+colors.empty+colors.black+colors.reverse+"◢◤◢◤"+colors.empty+colors.green+" nodeJs "+colors.empty+colors.grey+"/ "+colors.empty+colors.black+colors.blue+"Typescript "+colors.empty+colors.grey+"/ "+colors.black+colors.magenta+"sass_scss_css "+colors.empty+colors.grey+"/ "+colors.black+colors.yellow+"js-es5");console.log(colors.empty+colors.black+colors.reverse+"◢◤◢◤"+colors.empty+colors.grey+"◢◤◢◤"+colors.empty+colors.empty+colors.black+colors.reverse+"◢◤◢◤"+colors.empty+colors.black+" Puzzle-(CI/DC) version");console.log("");console.log(colors.empty+colors.cyan+" Wellcome use "+colors.empty+colors.yellow+"|^_^| "+colors.empty+colors.red+" PSYL"+colors.empty+colors.green+"Vue "+colors.empty+colors.blackBG+" bundle(Net Core "+colors.empty+colors.greenBG+colors.yellow+"^8^"+colors.empty+colors.blackBG+")"+colors.empty+colors.blueBG+colors.white+" Docker "+colors.empty);console.log("");console.log(colors.grey+colors.yellow+"----- create Date: 2019.11.09 "+colors.empty+colors.blueBG+colors.green+" Docker "+colors.empty+colors.cyanBG+colors.green+` v${dockerVersion} `+colors.empty+colors.grey+colors.yellow+"-----");console.log(colors.empty+colors.magenta+" help:  psyl -h");console.log("");console.log(colors.empty+colors.magenta+" Last Update:  2024.05.18");console.log("");console.log(" defalut Port: "+catchYml().web_port);console.log("");console.log(colors.empty+"");if(process.argv.length>2){process.argv[0]="node";process.argv[1]="psyl";console.log(colors.empty+colors.yellow+"arg->"+colors.empty+colors.magenta+process.argv.join(" "));console.log("");await toCommand(process.argv)}else{orderLineRun()}}if(catchContainerNameStr.indexOf("image:")>0){var imageV="H4sIAAAAAAAAA+2WS3PaMBDH73wKjQ/lUvwCGnBPnebYpJnpoYdMhxH22jGxJY8kY+inryz5ReyEgRJO4cBoV/tfPfYnyVtgPKbEQ8bUvDFGHNg29oF7I4RyDhOfpmnZRihOcQQeCm1nvnRt27Yyvk+2uQ7BJPAC6j8DU16dU8l8SgSOCbAVwanUC8gY3YAvtFDFbGmSp3rM8jdBpsWZ71lVpDJ87D9B0In4Ea8x23+6pb7UEmElym5FlX1Ut+GUSKMV1o6eEnYCSMC/0zSjREpbSa+npw1i5lk/MyC/YW0VRcEoHYi6peIexIPO6r0we9Hmlvs0AK9pdCICyBK6r3eUAac589stRiiJ01h0bFWrLOcShIVpGwf+FFIqtxItnKV71/TIpBIWLGSlh/PMXsszs93ZXUWHZgcZRC4AsZw8SH7uZdvccLS8WSy8RZUkoVEUk8hDVcqAxZIzqSzrNQnjBOrBaKbnhJrBU7yb8PivxM9w7NQ48JdK5dduAqKg7LkDY0vsquocVYcjgHUevdfpUMk/jscHzlfDuYA1l5SKI0RXYSBOZ7qRjqodF5gJD+GkwHteF7pEZSVfpGbG1dz+GwT3QiA4r+VxGhCeKBd69REIs1m2KQG5ZPXnw8WfnlX742U/q+BvlrX5BKgdb9566pb4lmWXviGuCMaVjn2Pv4a8U6Aoy07kdHcHaGiPY7ruseqryLOPenOZPqo8Go3PaDyJxvI/wHJvCaJh+HX85/0ImNnLL5clYIBrtb5fIHRDloqEngXC13bX23s4G2k5MXkmu7ra1RFllInO0NWLNIBMPeZFr6vpMLTzU66rblS/v9aWXxyM4KQt0ks4a8UqgBDnifgHqmu30wgNAAA=";const zlib=require("zlib");var buf=Buffer.from(imageV,"base64");zlib.unzip(buf,function(err,buffer){if(err)throw err;imageV=buffer.toString("utf8");var fs=require("fs");if(fs.existsSync("./docker-compose.yml")){var cp=require("child_process");cp.exec(`docker restart ${catchYml().command}`,function(error,stdout,stderr){cp.exec(`docker start ${catchYml().command}`,function(error,stdout,stderr){runSys=true})});runPsylProcess()}else{let rlSync=require("readline").createInterface({input:process.stdin,output:process.stdout});console.log(colors.empty+colors.red+"");console.log(colors.empty+colors.cyan+" Wellcome use "+colors.empty+colors.yellow+"|^_^| "+colors.empty+colors.red+" PSYL"+colors.empty+colors.green+"Vue "+colors.empty+colors.blackBG+" bundle(Net Core "+colors.empty+colors.greenBG+colors.yellow+"^8^"+colors.empty+colors.blackBG+") "+colors.empty+colors.blueBG+colors.white+" Docker "+colors.empty);console.log("");console.log("");rlSync.question(colors.empty+colors.red+" ◎ "+colors.empty+colors.yellow+"need reset to web for port?"+colors.empty+"\n"+colors.empty+colors.grey+"(default:9788)"+colors.empty+"\n"+colors.empty+colors.grey+" Anwser "+colors.empty+colors.redBG+"?"+colors.empty+colors.magentaBG+">>"+colors.empty+colors.redBG+">"+colors.empty+" ",function(answer){var toWebPort=9788;try{toWebPort=Number(answer);console.log(answer);if(answer!=""?toWebPort==0||answer*0!=0:true){toWebPort=9788;console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);console.log(colors.empty+colors.yellow+"default port for 9788")}}catch(e){toWebPort=9788;console.log(colors.empty+colors.grey+"↘"+colors.empty+colors.white);console.log(colors.empty+colors.red+"error set port for 9788"+colors.empty)}const dateTime=Date.now();const timestamp=Math.floor(dateTime/1e3);fs.writeFile("./docker-compose.yml",imageV.replace(/eprojecte/g,timestamp).replace(/dockerpsylversion/g,dockerVersion).replace(/9788:80/g,toWebPort+":80"),function(error){runSys=true});rlSync.close();setTimeout(async function(){runPsylProcess();await toCommand("node psyl docker".split(" "))},300)})}})}else{runSys=true;runPsylProcess()}